{"version":3,"file":"static/js/729.4c78706b.chunk.js","mappings":"qMACA,EAAuB,yBAAvB,EAAuD,yBAAvD,EAAyF,2B,SCG5EA,EAAa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAwB,IAAhBC,KAAAA,OAAgB,MAAT,GAAS,EAC3CC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,eAAIC,UAAWC,EAAf,SACKL,EAAOM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACR,SAAC,KAAD,CAAeC,GAAE,UAAKT,GAAL,OAAYM,GAAMI,MAAO,CAAEC,KAAMV,GAAlD,UACI,eAAIE,UAAWC,EAAf,UACG,gBAAKD,UAAWC,EAAYQ,IAC3BJ,EACM,kCAAoCA,GACpC,SAAC,MAAD,IACRK,IAAMN,OANDD,EADH,KAavB,C,sICrBD,EAAuB,wBAAvB,EAAuD,yBAAvD,EAA4F,6BAA5F,EAAyI,iC,kBCE5HQ,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAgBA,OACI,kBAAMf,UAAWC,EAAUW,SAZV,SAACI,GAClBA,EAAEC,iBACmB,KAAjBH,EAAMI,QAKdN,EAASE,GACTC,EAAS,KALPI,MAAM,wDAMP,EAGG,WACI,kBAAOnB,UAAWC,EAAYmB,KAAK,OAC/BC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOV,EACPW,SArBc,SAACT,GACvBD,EAASC,EAAEU,OAAOF,MAAMG,cAC3B,KAqBO,mBAAQ3B,UAAWC,EAAemB,KAAK,SAAvC,UAAgD,SAAC,MAAD,CAAUpB,UAAWC,QAGhF,E,kBC1Bc,SAAS2B,IAAW,IAAD,EAC9B,GAAwCf,EAAAA,EAAAA,UAAS,IAAjD,eAAOgB,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BpB,EAAAA,EAAAA,UAAS,QAArC,eAAOqB,EAAP,KAAeC,EAAf,KACMrB,EAAK,UAAGkB,EAAaI,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAe,mCAAG,yFACfxB,EADe,iEAKhBqB,EAAU,WALM,UAMOI,EAAAA,EAAAA,IAAkBzB,GANzB,mBAOY,KADpB0B,EANQ,EAMRA,MACCC,QAAQC,OAPD,wBAQZvB,MAAM,kDACNgB,EAAU,YATE,2BAYhBL,EAAgBU,EAAKC,SACrBN,EAAU,YAbM,kDAiBhBQ,QAAQC,IAAR,MACAT,EAAU,YAlBM,0DAAH,qDAqBnBG,GACL,GAAE,CAACxB,IAOJ,OACI,6BACI,SAACH,EAAD,CAAWC,SAPO,SAAAiC,GACtBZ,EAAgC,KAAhBY,EAAqB,CAAE/B,MAAO+B,GAAgB,CAAC,GAC/Df,EAAgB,GACrB,IAKWD,EAAaa,OAAS,IAAK,SAAC/C,EAAA,EAAD,CAAYC,OAAQiC,IACrC,YAAXK,IAAwB,SAACY,EAAA,EAAD,MAGpC,C","sources":["webpack://react-homework-template/./src/components/ListMovies/ListMovies.module.css?08bb","components/ListMovies/ListMovies.jsx","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ListMovies_list__jtcUy\",\"item\":\"ListMovies_item__lLotJ\",\"poster\":\"ListMovies_poster__KfqR0\"};","import { Link, useLocation } from 'react-router-dom';\nimport { ImImage } from \"react-icons/im\";\nimport PropTypes from 'prop-types';\nimport css from './ListMovies.module.css'\nexport const ListMovies = ({ movies, path = '' }) => {\n    const location = useLocation()\n\n    return (\n        <ul className={css.list}>\n            {movies.map(({ id, title, poster_path }) => (\n                <Link key={id} to={`${path}${id}`} state={{ from: location }}>\n                    <li className={css.item}>\n                       <img className={css.poster} src={\n                        poster_path\n                            ? 'https://image.tmdb.org/t/p/w300' + poster_path\n                            : <ImImage/>\n                    } alt={ title} /> \n                  </li>\n               </Link>\n            ))}\n        </ul>\n    )\n}\nListMovies.propTypes = {\n    movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n    path: PropTypes.string,\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchBar_form__gW7Gj\",\"input\":\"SearchBar_input__bIy50\",\"searchBtn\":\"SearchBar_searchBtn__cdWGi\",\"searchBtnIcon\":\"SearchBar_searchBtnIcon__CuI0n\"};","import { useState } from 'react'\nimport css from './SearchBar.module.css';\nimport { ImSearch } from \"react-icons/im\";\nexport const SearchBar = ({ onSubmit }) => {\n    const [query, setQuery] = useState('')\n\n    const handleQueryChange = (e) => {\n        setQuery(e.target.value.toLowerCase())\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (query.trim() === '') {\n      alert('Please, enter your search term into the search field!');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n    }\n\n    return (\n        <form className={css.form} onSubmit={handleSubmit}>\n            <input className={css.input}  type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movies\"\n                value={query}\n                onChange={handleQueryChange}\n            />\n            <button className={css.searchBtn} type=\"submit\"><ImSearch className={css.searchBtnIcon} /></button>\n        </form>\n    )\n}","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport {fetchMovieByQuery} from 'api/movieApi';\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { ListMovies } from 'components/ListMovies/ListMovies';\nimport {Loader} from 'components/Loader/Loader';\nexport default function Movies () {\n    const [searchMovies, setSearchMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [status, setStatus] = useState('idle');\n    const query = searchParams.get('query') ?? '';\n\n    useEffect(() => {\n        const getMovieByQuery = async () => {\n            if (!query) {\n                return\n            }\n            try {\n                setStatus('pending')\n                const { data } = await fetchMovieByQuery(query)\n                if (data.results.length === 0) {\n                    alert('Ooops, someting went wrong. Please, try again.');\n                    setStatus('rejected');\n                    return;\n                }\n                setSearchMovies(data.results);\n                setStatus('resolved');\n            }\n                \n            catch (err) {\n                console.log(err);\n                setStatus('rejected');\n            }\n        }\n          getMovieByQuery()\n    }, [query])\n\n     const handleFormSubmit = searchQuery => {\n        setSearchParams(searchQuery !== '' ? { query: searchQuery } : {});\n        setSearchMovies([]);\n  };\n    \n    return (\n        <main>\n            <SearchBar onSubmit={handleFormSubmit} />\n             {searchMovies.length > 0 && <ListMovies movies={searchMovies} />}\n            {status === 'pending' && <Loader />}\n        </main>\n    )\n}"],"names":["ListMovies","movies","path","location","useLocation","className","css","map","id","title","poster_path","to","state","from","src","alt","SearchBar","onSubmit","useState","query","setQuery","e","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","value","onChange","target","toLowerCase","Movies","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","status","setStatus","get","useEffect","getMovieByQuery","fetchMovieByQuery","data","results","length","console","log","searchQuery","Loader"],"sourceRoot":""}